# FILE: reporting_utils.py

import streamlit as st
import io
from fpdf import FPDF
from pptx import Presentation
from pptx.util import Inches
import plotly.graph_objects as go
import matplotlib.pyplot as plt

# ==============================================================================
# PDF REPORTING ENGINE
# ==============================================================================
class PDF(FPDF):
    """Custom PDF class with a header and footer for professional reports."""
    def header(self):
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, 'V&V Sentinel Toolkit - Generated Report', 0, 0, 'C')
        self.ln(20)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def generate_pdf_report(title, kpis, figures):
    """Generates a multi-page PDF report from KPIs and figures."""
    pdf = PDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 16)
    clean_title = title.encode('latin-1', 'replace').decode('latin-1')
    pdf.cell(0, 10, clean_title, 0, 1, 'C'); pdf.ln(10)

    if kpis:
        pdf.set_font("Arial", 'B', 12); pdf.cell(0, 10, "Key Performance Indicators & Summary", 0, 1)
        pdf.set_font("Arial", '', 10)
        for key, value in kpis.items():
            pdf.set_font("Arial", 'B', 10); pdf.cell(60, 8, f"{key}:", 0, 0)
            pdf.set_font("Arial", '', 10)
            clean_value = str(value).encode('latin-1', 'replace').decode('latin-1')
            pdf.multi_cell(0, 8, clean_value, 0, 1)
        pdf.ln(10)

    if figures:
        pdf.set_font("Arial", 'B', 12); pdf.cell(0, 10, "Visual Analysis", 0, 1)
        for fig_title, fig in figures.items():
            if pdf.get_y() > 190: pdf.add_page()
            clean_fig_title = fig_title.encode('latin-1', 'replace').decode('latin-1')
            pdf.set_font("Arial", 'I', 11); pdf.cell(0, 8, f"- {clean_fig_title}", 0, 1)
            try:
                img_bytes = io.BytesIO()
                if isinstance(fig, go.Figure): fig.write_image(img_bytes, format='png', scale=2, width=800, height=500)
                elif isinstance(fig, plt.Figure): fig.savefig(img_bytes, format='png', bbox_inches='tight', dpi=200)
                else: img_bytes = fig
                img_bytes.seek(0)
                pdf.image(img_bytes, name=f"figure_{hash(fig_title)}.png", w=180)
                pdf.ln(5)
            except Exception as e:
                pdf.set_text_color(255, 0, 0); pdf.cell(0, 8, f"Error rendering '{clean_fig_title}': {e}", 0, 1); pdf.set_text_color(0, 0, 0)
    return pdf.output(dest='S').encode('latin-1')

# ==============================================================================
# POWERPOINT REPORTING ENGINE
# ==============================================================================
def generate_pptx_report(title, kpis, figures):
    """Generates a multi-slide PowerPoint report from KPIs and figures."""
    prs = Presentation()
    slide = prs.slides.add_slide(prs.slide_layouts[0])
    slide.shapes.title.text = title; slide.placeholders[1].text = "Generated by V&V Sentinel Toolkit"

    if kpis:
        slide = prs.slides.add_slide(prs.slide_layouts[1])
        slide.shapes.title.text = "Key Performance Indicators & Summary"
        tf = slide.shapes.placeholders[1].text_frame; tf.clear()
        for key, value in kpis.items():
            p = tf.add_paragraph(); p.text = f"{key}: "; p.font.bold = True
            runner = p.add_run(); runner.text = str(value)
        tf.fit_text()

    if figures:
        for fig_title, fig in figures.items():
            slide = prs.slides.add_slide(prs.slide_layouts[5])
            title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.2), Inches(9), Inches(0.8))
            title_box.text_frame.text = fig_title
            try:
                img_bytes = io.BytesIO()
                if isinstance(fig, go.Figure): fig.write_image(img_bytes, format='png', scale=2, width=800, height=500)
                elif isinstance(fig, plt.Figure): fig.savefig(img_bytes, format='png', bbox_inches='tight', dpi=200)
                else: img_bytes = fig
                img_bytes.seek(0)
                slide.shapes.add_picture(img_bytes, Inches(0.5), Inches(1.2), width=Inches(9.0))
            except Exception as e:
                err_box = slide.shapes.add_textbox(Inches(1), Inches(3), Inches(8), Inches(1))
                err_box.text_frame.text = f"Error rendering '{fig_title}': {e}"
    pptx_buffer = io.BytesIO()
    prs.save(pptx_buffer)
    return pptx_buffer.getvalue()

# ==============================================================================
# MASTER UI REPORTING FUNCTION
# ==============================================================================
def render_reporting_section(report_title, kpis, figures):
    """Renders the entire reporting UI section with download buttons."""
    st.divider()
    st.subheader("Reporting")
    with st.container(border=True):
        st.markdown("**Generate a formal report of this analysis.**")
        pdf_col, pptx_col = st.columns(2)
        clean_title = report_title.replace(" ", "_").replace(":", "").replace("/", "_")
        
        with pdf_col:
            try:
                pdf_bytes = generate_pdf_report(report_title, kpis, figures)
                st.download_button("ðŸ“„ Download PDF Report", pdf_bytes, f"{clean_title}.pdf", "application/pdf", use_container_width=True)
            except Exception as e: st.error(f"PDF Error: {e}")
        with pptx_col:
            try:
                pptx_bytes = generate_pptx_report(report_title, kpis, figures)
                st.download_button("ðŸ“Š Download PowerPoint Report", pptx_bytes, f"{clean_title}.pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation", use_container_width=True)
            except Exception as e: st.error(f"PPTX Error: {e}")
