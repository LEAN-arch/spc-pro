# FILE: reporting_utils.py (Final, Environment-Proof Version)

import streamlit as st
import io
import json
from fpdf import FPDF
from pptx import Presentation
from pptx.util import Inches, Pt
import plotly.graph_objects as go
import matplotlib.pyplot as plt

# ==============================================================================
# HELPER FUNCTION FOR PRE-FORMATTING KPIS
# ==============================================================================
def format_kpis_for_printing(kpis):
    """Pre-formats complex KPIs (dicts, lists) into clean, multi-line strings."""
    formatted = {}
    for key, value in kpis.items():
        if isinstance(value, dict):
            # Format dictionaries into a nice, multi-line string
            json_str = json.dumps(value, indent=2)
            formatted[key] = f"\n{json_str}"
        elif isinstance(value, list):
            # Format lists into a multi-line string
            formatted[key] = "\n" + "\n".join([f"  - {item}" for item in value])
        else:
            formatted[key] = value
    return formatted

# ==============================================================================
# PDF REPORTING ENGINE (Final)
# ==============================================================================
class PDF(FPDF):
    """Custom PDF class with a header and footer for professional reports."""
    def header(self):
        self.set_font('Helvetica', 'B', 12)
        self.cell(0, 10, 'V&V Sentinel Toolkit - Generated Report', 0, 0, 'C')
        self.ln(20)

    def footer(self):
        self.set_y(-15)
        self.set_font('Helvetica', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def generate_pdf_report(title, kpis, figures):
    """Generates a multi-page PDF report with robust text handling."""
    pdf = PDF()
    pdf.add_page()
    pdf.set_font("Helvetica", 'B', 16)
    clean_title = title.encode('latin-1', 'replace').decode('latin-1')
    pdf.multi_cell(0, 10, clean_title, align='C')
    pdf.ln(10)

    if kpis:
        # --- PDF FIX: Pre-format KPIs to handle complex types gracefully ---
        formatted_kpis = format_kpis_for_printing(kpis)
        
        pdf.set_font("Helvetica", 'B', 12)
        pdf.cell(0, 10, "Key Performance Indicators & Summary", ln=1, align='L')
        pdf.set_font("Helvetica", '', 10)
        for key, value in formatted_kpis.items():
            pdf.set_font("Helvetica", 'B', 10)
            pdf.multi_cell(0, 7, f"{key}:", align='L')
            pdf.set_font("Helvetica", '', 10)
            clean_value = str(value).encode('latin-1', 'replace').decode('latin-1')
            pdf.multi_cell(0, 7, f"  {clean_value}", align='L')
            pdf.ln(2)
        pdf.ln(10)

    if figures:
        pdf.set_font("Helvetica", 'B', 12)
        pdf.cell(0, 10, "Visual Analysis", ln=1, align='L')
        for fig_title, fig in figures.items():
            if pdf.get_y() > 190: pdf.add_page()
            clean_fig_title = fig_title.encode('latin-1', 'replace').decode('latin-1')
            pdf.set_font("Helvetica", 'I', 11)
            pdf.cell(0, 8, f"- {clean_fig_title}", ln=1, align='L')
            try:
                img_bytes = io.BytesIO()
                if isinstance(fig, go.Figure): fig.write_image(img_bytes, format='png', scale=2, width=800, height=500)
                elif isinstance(fig, plt.Figure): fig.savefig(img_bytes, format='png', bbox_inches='tight', dpi=200)
                else: img_bytes = fig
                img_bytes.seek(0)
                pdf.image(img_bytes, name=f"figure_{hash(fig_title)}.png", w=180)
                pdf.ln(5)
            except Exception as e:
                pdf.set_text_color(255, 0, 0)
                pdf.multi_cell(0, 8, f"Error rendering '{clean_fig_title}': {e}", align='L')
                pdf.set_text_color(0, 0, 0)
    return pdf.output(dest='S').encode('latin-1')

# ==============================================================================
# POWERPOINT REPORTING ENGINE (Final)
# ==============================================================================
def generate_pptx_report(title, kpis, figures):
    """Generates a multi-slide PowerPoint report."""
    prs = Presentation()
    slide = prs.slides.add_slide(prs.slide_layouts[0])
    slide.shapes.title.text = title; slide.placeholders[1].text = "Generated by V&V Sentinel Toolkit"

    if kpis:
        slide = prs.slides.add_slide(prs.slide_layouts[1])
        slide.shapes.title.text = "Key Performance Indicators & Summary"
        tf = slide.shapes.placeholders[1].text_frame; tf.clear()
        formatted_kpis = format_kpis_for_printing(kpis)
        for key, value in formatted_kpis.items():
            p = tf.add_paragraph(); p.text = f"{key}: "; p.font.bold = True; p.font.size = Pt(14)
            runner = p.add_run(); runner.text = str(value); runner.font.size = Pt(14)
        tf.fit_text(font_family='Calibri', max_size=18)

    if figures:
        for fig_title, fig in figures.items():
            slide = prs.slides.add_slide(prs.slide_layouts[5])
            title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.2), Inches(9), Inches(0.5))
            title_box.text_frame.text = fig_title
            
            # This will raise an exception in the cloud environment, which will be caught by the UI function.
            img_bytes = io.BytesIO()
            if isinstance(fig, go.Figure): fig.write_image(img_bytes, format='png', scale=2, width=800, height=500)
            elif isinstance(fig, plt.Figure): fig.savefig(img_bytes, format='png', bbox_inches='tight', dpi=200)
            else: img_bytes = fig
            img_bytes.seek(0)
            slide.shapes.add_picture(img_bytes, Inches(0.5), Inches(1.0), width=Inches(9.0))

    pptx_buffer = io.BytesIO()
    prs.save(pptx_buffer)
    return pptx_buffer.getvalue()

# ==============================================================================
# MASTER UI RENDERING FUNCTION (Final)
# ==============================================================================
def render_reporting_section(report_title, kpis, figures):
    """Renders the entire reporting UI section with robust error handling for cloud environments."""
    st.divider()
    st.subheader("Reporting")
    with st.container(border=True):
        st.markdown("**Generate a formal report of this analysis.**")
        pdf_col, pptx_col = st.columns(2)
        clean_title = report_title.replace(" ", "_").replace(":", "").replace("/", "_")
        
        with pdf_col:
            pdf_key = f"pdf_{clean_title}"
            try:
                pdf_bytes = generate_pdf_report(report_title, kpis, figures)
                st.download_button("üìÑ Download PDF Report", pdf_bytes, f"{clean_title}.pdf", "application/pdf", use_container_width=True, key=pdf_key)
            except Exception as e: st.error(f"PDF generation failed: {e}")

        with pptx_col:
            pptx_key = f"pptx_{clean_title}"
            try:
                pptx_bytes = generate_pptx_report(report_title, kpis, figures)
                st.download_button("üìä Download PowerPoint Report", pptx_bytes, f"{clean_title}.pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation", use_container_width=True, key=pptx_key)
            except Exception as e:
                # --- PPTX FIX: CATCH THE ERROR AND PROVIDE A BETTER UI ---
                st.download_button("üìä Download PowerPoint Report", b"", f"{clean_title}.pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation", use_container_width=True, key=pptx_key, disabled=True)
                st.warning(
                    """
                    **PowerPoint generation with charts is disabled in this cloud environment.** 
                    This is due to an incompatibility with the image rendering engine (`Kaleido`).
                    To generate a full report with charts, please run this application on your local machine.
                    """,
                    icon="‚öôÔ∏è"
                )
