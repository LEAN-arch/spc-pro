# FILE: reporting_utils.py (Final Corrected Version)

import streamlit as st
import io
import json
from fpdf import FPDF
from pptx import Presentation
from pptx.util import Inches, Pt
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import textwrap

# ==============================================================================
# IMAGE GENERATION ENGINE
# ==============================================================================
def create_kpi_image(kpis, title="Key Performance Indicators & Summary"):
    """Creates a PNG image from a dictionary of KPIs using Matplotlib."""
    formatted_kpis = {}
    for key, value in kpis.items():
        if isinstance(value, dict): json_str = json.dumps(value, indent=2); formatted_kpis[key] = f"\n{json_str}"
        else: formatted_kpis[key] = value
    lines = [f"{title}\n" + "="*len(title)]
    for key, value in formatted_kpis.items():
        key_lines = textwrap.wrap(f"{key}:", width=30); value_lines = textwrap.wrap(str(value), width=60)
        lines.append(key_lines[0])
        for line in key_lines[1:]: lines.append(f"  {line}")
        for line in value_lines: lines.append(f"    {line}")
        lines.append("")
    text_to_render = "\n".join(lines)
    num_lines = text_to_render.count('\n'); fig_height = max(4, num_lines * 0.3)
    fig, ax = plt.subplots(figsize=(8, fig_height))
    ax.text(0.01, 0.99, text_to_render, transform=ax.transAxes, fontsize=12, family='monospace', va='top', ha='left')
    ax.axis('off')
    buf = io.BytesIO()
    fig.savefig(buf, format='png', bbox_inches='tight', dpi=150)
    plt.close(fig)
    buf.seek(0)
    return buf

# ==============================================================================
# PDF REPORTING ENGINE (Final)
# ==============================================================================
class PDF(FPDF):
    """Custom PDF class with a header and footer for professional reports."""
    def header(self): self.set_font('Helvetica', 'B', 12); self.cell(0, 10, 'V&V Sentinel Toolkit - Generated Report', 0, 0, 'C'); self.ln(20)
    def footer(self): self.set_y(-15); self.set_font('Helvetica', 'I', 8); self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

def generate_pdf_report(title, kpis, figures):
    """Generates a multi-page PDF report by embedding pre-rendered images."""
    pdf = PDF()
    pdf.add_page()
    pdf.set_font("Helvetica", 'B', 16)
    clean_title = title.encode('latin-1', 'replace').decode('latin-1')
    pdf.multi_cell(0, 10, clean_title, align='C'); pdf.ln(5)

    if kpis:
        kpi_image_buf = create_kpi_image(kpis)
        # --- DEFINITIVE FIX FOR PDF ERROR ---
        # Pass the buffer as the first POSITIONAL argument, not with the 'name=' keyword.
        pdf.image(kpi_image_buf, type='PNG', w=180)
        # --- END OF FIX ---
        pdf.ln(5)

    if figures:
        pdf.set_font("Helvetica", 'B', 12); pdf.cell(0, 10, "Visual Analysis", ln=1, align='L')
        for fig_title, fig in figures.items():
            if pdf.get_y() > 200: pdf.add_page()
            clean_fig_title = fig_title.encode('latin-1', 'replace').decode('latin-1')
            pdf.set_font("Helvetica", 'I', 11); pdf.cell(0, 8, f"- {clean_fig_title}", ln=1, align='L')
            try:
                img_buf = io.BytesIO()
                if isinstance(fig, go.Figure): fig.write_image(img_buf, format='png', scale=2, width=800, height=500)
                elif isinstance(fig, plt.Figure): fig.savefig(img_buf, format='png', bbox_inches='tight', dpi=200)
                else: img_buf = fig
                img_buf.seek(0)
                # --- APPLYING FIX HERE AS WELL ---
                pdf.image(img_buf, type='PNG', w=180)
                pdf.ln(5)
            except Exception as e:
                pdf.set_text_color(255, 0, 0)
                pdf.multi_cell(0, 8, f"Error: Image rendering failed. Please run locally. Details: {e}", align='L')
                pdf.set_text_color(0, 0, 0)
    return pdf.output()

# ==============================================================================
# POWERPOINT REPORTING ENGINE (Final)
# ==============================================================================
def generate_pptx_report(title, kpis, figures):
    """Generates a multi-slide PowerPoint report with robust error handling."""
    prs = Presentation()
    slide = prs.slides.add_slide(prs.slide_layouts[0])
    slide.shapes.title.text = title; slide.placeholders[1].text = "Generated by V&V Sentinel Toolkit"

    if kpis:
        slide = prs.slides.add_slide(prs.slide_layouts[5])
        slide.shapes.add_textbox(Inches(0.5), Inches(0.2), Inches(9), Inches(0.5)).text_frame.text = "Key Performance Indicators & Summary"
        kpi_image_buf = create_kpi_image(kpis)
        slide.shapes.add_picture(kpi_image_buf, Inches(0.5), Inches(1.0), width=Inches(9.0))

    if figures:
        for fig_title, fig in figures.items():
            slide = prs.slides.add_slide(prs.slide_layouts[5])
            title_box = slide.shapes.add_textbox(Inches(0.5), Inches(0.2), Inches(9), Inches(0.5))
            title_box.text_frame.text = fig_title
            try:
                img_buf = io.BytesIO()
                if isinstance(fig, go.Figure): fig.write_image(img_buf, format='png', scale=2, width=800, height=500)
                elif isinstance(fig, plt.Figure): fig.savefig(img_buf, format='png', bbox_inches='tight', dpi=200)
                else: img_buf = fig
                img_buf.seek(0)
                slide.shapes.add_picture(img_buf, Inches(0.5), Inches(1.0), width=Inches(9.0))
            except Exception as e:
                err_box = slide.shapes.add_textbox(Inches(1), Inches(2), Inches(8), Inches(4))
                tf = err_box.text_frame; tf.clear()
                p1 = tf.add_paragraph(); p1.text = f"Error Rendering: '{fig_title}'"; p1.font.bold = True; p1.font.size = Pt(24)
                p2 = tf.add_paragraph(); p2.text = "\nRoot Cause:"; p2.font.bold = True; p2.font.size = Pt(18)
                p3 = tf.add_paragraph(); p3.text = "The 'Kaleido' image rendering engine is likely incompatible with the cloud deployment environment."; p3.font.size = Pt(14)
    
    pptx_buffer = io.BytesIO()
    prs.save(pptx_buffer)
    return pptx_buffer.getvalue()

# ==============================================================================
# MASTER UI RENDERING FUNCTION (Final)
# ==============================================================================
def render_reporting_section(report_title, kpis, figures):
    """Renders the entire reporting UI section with robust error handling for cloud environments."""
    st.divider()
    st.subheader("Reporting")
    with st.container(border=True):
        st.markdown("**Generate a formal report of this analysis.**")
        pdf_col, pptx_col = st.columns(2)
        clean_title = report_title.replace(" ", "_").replace(":", "").replace("/", "_")
        
        unique_key_base = f"{clean_title}_{hash(str(kpis))}_{hash(str(figures))}"

        with pdf_col:
            try:
                pdf_bytes = generate_pdf_report(report_title, kpis, figures)
                st.download_button("üìÑ Download PDF Report", pdf_bytes, f"{clean_title}.pdf", "application/pdf", use_container_width=True, key=f"pdf_{unique_key_base}")
            except Exception as e: st.error(f"PDF generation failed: {e}")
        
        with pptx_col:
            try:
                pptx_bytes = generate_pptx_report(report_title, kpis, figures)
                st.download_button("üìä Download PowerPoint Report", pptx_bytes, f"{clean_title}.pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation", use_container_width=True, key=f"pptx_{unique_key_base}")
            except Exception as e:
                st.download_button("üìä Download PowerPoint Report", b"", disabled=True, use_container_width=True, key=f"pptx_disabled_{unique_key_base}")
                if ' Kaleido ' in str(e) or 'unsupported operating system' in str(e).lower() or 'xvfb' in str(e).lower():
                    st.warning("Chart rendering for PowerPoint is disabled in this cloud environment. Please run the app locally for full reports.", icon="‚öôÔ∏è")
                else:
                    st.error(f"PPTX Error: {e}")
